receivers:
  # Receive OTLP from our application
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"

  # Use the filelog receiver to read the application's logs from its log file.
  # This config reads JSON logs in same format that the Cloud Logging agents
  # support:
  # https://cloud.google.com/logging/docs/structured-logging#special-payload-fields
  filelog:
    start_at: beginning
    include:
      - "/var/log/app.log"
    operators:
      - type: json_parser
        parse_to: body
        timestamp:
          parse_from: body.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%fZ'
        severity:
          parse_from: body.severity
          preset: none
          # parse minimal set of severity strings that Cloud Logging explicitly supports
          # https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity
          mapping:
            debug: debug
            info: info
            info3: notice
            warn: warning
            error: error
            fatal: critical
            fatal3: alert
            fatal4: emergency

      # set trace_flags to SAMPLED if GCP attribute is set to true
      - type: add
        field: body.trace_flags
        value: "01"
        if: body["logging.googleapis.com/trace_sampled"] == true

      # parse the trace context fields from GCP attributes
      - type: regex_parser
        parse_from: body["logging.googleapis.com/trace"]
        parse_to: body
        regex: (?P<trace_id>.*)
        trace:
          span_id:
            parse_from: body["logging.googleapis.com/spanId"]

      # Remove fields that are redundant from translation above and already
      # included in OTel LogEntry message
      - type: remove
        field: body.timestamp
      - type: remove
        field: body.trace_id
      - type: remove
        field: body.trace_flags
      - type: remove
        field: body.severity
      - type: remove
        field: body["logging.googleapis.com/trace"]
      - type: remove
        field: body["logging.googleapis.com/spanId"]
      - type: remove
        field: body["logging.googleapis.com/trace_sampled"]

exporters:
  # Export logs and traces using the standard googelcloud exporter
#  googlecloud:
#    project: "one-global-chorus-cam-dev"
#    log:
#      default_log_name: "opentelemetry.io/collector-exported-log"
  debug:
    verbosity: detailed
  otlp:
    # The endpoint uses a fully qualified domain name because Jaeger is in another namespace
    endpoint: jaeger-collector.observability.svc.cluster.local:4317

    tls:
      insecure: true # Use insecure for cluster-internal communication

processors:
  # Batch telemetry together to more efficiently send to GCP
  batch:
    send_batch_max_size: 500
    send_batch_size: 500
    timeout: 1s
  resourcedetection:
    detectors: ["env", "gcp"]

service:
  pipelines:
    traces:
      receivers: ["otlp"]
      processors: ["batch", "resourcedetection"]
      exporters: ["debug", "otlp"]
    metrics:
      receivers: ["otlp"]
      processors: ["batch", "resourcedetection"]
      exporters: ["debug"]
    logs:
      receivers: ["filelog"]
      processors: ["batch", "resourcedetection"]
      exporters: ["debug"]
